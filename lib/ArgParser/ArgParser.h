// Generated by Bisonc++ V6.04.03 on Wed, 05 Apr 2023 09:55:22 +0200

#ifndef ArgParser_h_included
#define ArgParser_h_included

#include "ArgParserbase.h"
#include "../ArgScanner/ArgScanner.h"
#include "../CommandRecipe/CommandRecipe.h"

#include <vector>
#include <sstream>

// Parser for a command from the command line.
class ArgParser :
  public ArgParserBase
{
    using StrIniList = std::initializer_list<std::string>;

    // args will be converted into a stream to be parsed
    std::istringstream d_argIStream;

    ArgScanner d_scanner;
    CommandRecipe d_cmdRecipe;

  public:
    ArgParser() = default;
    ArgParser(size_t argc, std::vector<std::string> const &argv);        // 1.cc
    int parse();

    CommandRecipe const &getCmdRecipe() const;

  private:
    void error(char const *msg = "syntax error");
    int lex();

    std::istringstream makeArgIStream(
      size_t argc, std::vector<std::string> const &argv
    );
    void setCmdType(char flag);
    void addArguments(StrIniList const &args);
    void addFlag(char flag, StrIniList const &args);

                                    // Pre-gen'd
    void print();
    void exceptionHandler(std::exception const &exc);

                                    // support functions for parse():
    void executeAction_(int ruleNr);
    void errorRecovery_();
    void nextCycle_();
    void nextToken_();
    void print_();
};

inline CommandRecipe const &ArgParser::getCmdRecipe() const
{
  return d_cmdRecipe;
}


#endif
